
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000010  00800060  00800060  00000250  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a4  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000238  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000015f  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000260  00000000  00000000  000006ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  0000090c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000132  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000080  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 37       	cpi	r26, 0x70	; 112
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	78 d0       	rcall	.+240    	; 0x134 <main>
  44:	c9 c0       	rjmp	.+402    	; 0x1d8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <ProcessPressedButton>:
		//Process button clicks for side 2		
	}
}

void ProcessPressedButton(int ButtonPressed)
{
  48:	dc 01       	movw	r26, r24
	Pressed_Confidence_Level[ButtonPressed] ++;
  4a:	9c 01       	movw	r18, r24
  4c:	22 0f       	add	r18, r18
  4e:	33 1f       	adc	r19, r19
  50:	f9 01       	movw	r30, r18
  52:	e8 59       	subi	r30, 0x98	; 152
  54:	ff 4f       	sbci	r31, 0xFF	; 255
  56:	80 81       	ld	r24, Z
  58:	91 81       	ldd	r25, Z+1	; 0x01
  5a:	01 96       	adiw	r24, 0x01	; 1
  5c:	91 83       	std	Z+1, r25	; 0x01
  5e:	80 83       	st	Z, r24
	if (Pressed_Confidence_Level[ButtonPressed] > 500)
  60:	85 5f       	subi	r24, 0xF5	; 245
  62:	91 40       	sbci	r25, 0x01	; 1
  64:	0c f4       	brge	.+2      	; 0x68 <ProcessPressedButton+0x20>
  66:	65 c0       	rjmp	.+202    	; 0x132 <ProcessPressedButton+0xea>
	{
		if (Pressed[ButtonPressed] == 0)
  68:	f9 01       	movw	r30, r18
  6a:	e4 59       	subi	r30, 0x94	; 148
  6c:	ff 4f       	sbci	r31, 0xFF	; 255
  6e:	80 81       	ld	r24, Z
  70:	91 81       	ldd	r25, Z+1	; 0x01
  72:	89 2b       	or	r24, r25
  74:	09 f0       	breq	.+2      	; 0x78 <ProcessPressedButton+0x30>
  76:	57 c0       	rjmp	.+174    	; 0x126 <ProcessPressedButton+0xde>
		{
			Pressed[ButtonPressed] = 1;
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	31 83       	std	Z+1, r19	; 0x01
  7e:	20 83       	st	Z, r18
			
			if (ButtonPressed == 0)	PORTB |= 1<<LEDNumber[ButtonPressed];
  80:	10 97       	sbiw	r26, 0x00	; 0
  82:	59 f4       	brne	.+22     	; 0x9a <ProcessPressedButton+0x52>
  84:	88 b3       	in	r24, 0x18	; 24
  86:	00 90 64 00 	lds	r0, 0x0064
  8a:	02 c0       	rjmp	.+4      	; 0x90 <ProcessPressedButton+0x48>
  8c:	22 0f       	add	r18, r18
  8e:	33 1f       	adc	r19, r19
  90:	0a 94       	dec	r0
  92:	e2 f7       	brpl	.-8      	; 0x8c <ProcessPressedButton+0x44>
  94:	82 2b       	or	r24, r18
  96:	88 bb       	out	0x18, r24	; 24
  98:	0e c0       	rjmp	.+28     	; 0xb6 <ProcessPressedButton+0x6e>
			if (ButtonPressed == 1)	PORTD |= 1<<LEDNumber[ButtonPressed];
  9a:	a1 30       	cpi	r26, 0x01	; 1
  9c:	b1 05       	cpc	r27, r1
  9e:	59 f4       	brne	.+22     	; 0xb6 <ProcessPressedButton+0x6e>
  a0:	22 b3       	in	r18, 0x12	; 18
  a2:	cd 01       	movw	r24, r26
  a4:	00 90 66 00 	lds	r0, 0x0066
  a8:	02 c0       	rjmp	.+4      	; 0xae <ProcessPressedButton+0x66>
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <ProcessPressedButton+0x62>
  b2:	28 2b       	or	r18, r24
  b4:	22 bb       	out	0x12, r18	; 18
			LEDNumber[ButtonPressed] ++;
  b6:	fd 01       	movw	r30, r26
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	ec 59       	subi	r30, 0x9C	; 156
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	80 81       	ld	r24, Z
  c2:	91 81       	ldd	r25, Z+1	; 0x01
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	91 83       	std	Z+1, r25	; 0x01
  c8:	80 83       	st	Z, r24
			if (LEDNumber[ButtonPressed] > 6)
  ca:	07 97       	sbiw	r24, 0x07	; 7
  cc:	64 f1       	brlt	.+88     	; 0x126 <ProcessPressedButton+0xde>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
			{
				//PORTB is winner and blink or do something else
				for(int i=0; i<10; i++)
				{
					if(ButtonPressed == 0) PORTB = 0b10000000;
					if(ButtonPressed == 1) PORTD = 0b10000000;
  d2:	70 e8       	ldi	r23, 0x80	; 128
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d4:	40 e2       	ldi	r20, 0x20	; 32
  d6:	5e e4       	ldi	r21, 0x4E	; 78
					_delay_ms(10);
					if(ButtonPressed == 0) PORTB = 0b11111111;
					if(ButtonPressed == 1) PORTD = 0b11111111;
  d8:	6f ef       	ldi	r22, 0xFF	; 255
			if (LEDNumber[ButtonPressed] > 6)
			{
				//PORTB is winner and blink or do something else
				for(int i=0; i<10; i++)
				{
					if(ButtonPressed == 0) PORTB = 0b10000000;
  da:	10 97       	sbiw	r26, 0x00	; 0
  dc:	11 f4       	brne	.+4      	; 0xe2 <ProcessPressedButton+0x9a>
  de:	78 bb       	out	0x18, r23	; 24
  e0:	04 c0       	rjmp	.+8      	; 0xea <ProcessPressedButton+0xa2>
					if(ButtonPressed == 1) PORTD = 0b10000000;
  e2:	a1 30       	cpi	r26, 0x01	; 1
  e4:	b1 05       	cpc	r27, r1
  e6:	09 f4       	brne	.+2      	; 0xea <ProcessPressedButton+0xa2>
  e8:	72 bb       	out	0x12, r23	; 18
  ea:	ca 01       	movw	r24, r20
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <ProcessPressedButton+0xa4>
					_delay_ms(10);
					if(ButtonPressed == 0) PORTB = 0b11111111;
  f0:	10 97       	sbiw	r26, 0x00	; 0
  f2:	11 f4       	brne	.+4      	; 0xf8 <ProcessPressedButton+0xb0>
  f4:	68 bb       	out	0x18, r22	; 24
  f6:	04 c0       	rjmp	.+8      	; 0x100 <ProcessPressedButton+0xb8>
					if(ButtonPressed == 1) PORTD = 0b11111111;
  f8:	a1 30       	cpi	r26, 0x01	; 1
  fa:	b1 05       	cpc	r27, r1
  fc:	09 f4       	brne	.+2      	; 0x100 <ProcessPressedButton+0xb8>
  fe:	62 bb       	out	0x12, r22	; 18
 100:	ca 01       	movw	r24, r20
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <ProcessPressedButton+0xba>
			if (ButtonPressed == 1)	PORTD |= 1<<LEDNumber[ButtonPressed];
			LEDNumber[ButtonPressed] ++;
			if (LEDNumber[ButtonPressed] > 6)
			{
				//PORTB is winner and blink or do something else
				for(int i=0; i<10; i++)
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	2a 30       	cpi	r18, 0x0A	; 10
 10c:	31 05       	cpc	r19, r1
 10e:	29 f7       	brne	.-54     	; 0xda <ProcessPressedButton+0x92>
					_delay_ms(10);
					if(ButtonPressed == 0) PORTB = 0b11111111;
					if(ButtonPressed == 1) PORTD = 0b11111111;
					_delay_ms(10);
				}
				LEDNumber[0] = 0;
 110:	10 92 65 00 	sts	0x0065, r1
 114:	10 92 64 00 	sts	0x0064, r1
				LEDNumber[1] = 0;
 118:	10 92 67 00 	sts	0x0067, r1
 11c:	10 92 66 00 	sts	0x0066, r1
				PORTB = 0b10000000;
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	88 bb       	out	0x18, r24	; 24
				PORTD = 0b10000000;
 124:	82 bb       	out	0x12, r24	; 18
			}
			
		}
		Pressed_Confidence_Level[ButtonPressed] = 0;
 126:	aa 0f       	add	r26, r26
 128:	bb 1f       	adc	r27, r27
 12a:	a8 59       	subi	r26, 0x98	; 152
 12c:	bf 4f       	sbci	r27, 0xFF	; 255
 12e:	1d 92       	st	X+, r1
 130:	1c 92       	st	X, r1
 132:	08 95       	ret

00000134 <main>:
int LEDNumber[2];

int main(void)
{
	//Initialization area. Setting up ports and data direction registors
	DDRB = 0b01111111;
 134:	8f e7       	ldi	r24, 0x7F	; 127
 136:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b01111111;
 138:	81 bb       	out	0x11, r24	; 17
	PORTB = 0b10000000;
 13a:	80 e8       	ldi	r24, 0x80	; 128
 13c:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b10000000;
 13e:	82 bb       	out	0x12, r24	; 18

	while (1)
	{
		if (bit_is_clear(PINB, 7))
 140:	b7 99       	sbic	0x16, 7	; 22
 142:	04 c0       	rjmp	.+8      	; 0x14c <main+0x18>
		{
			//Lighting up LED on port B one at a time
			ProcessPressedButton(0);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	7f df       	rcall	.-258    	; 0x48 <ProcessPressedButton>
 14a:	14 c0       	rjmp	.+40     	; 0x174 <main+0x40>
	}
}

void ProcessReleasedsButton(int ButtonReleased)
{
	Released_Confidence_Level[ButtonReleased] ++;
 14c:	80 91 60 00 	lds	r24, 0x0060
 150:	90 91 61 00 	lds	r25, 0x0061
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 61 00 	sts	0x0061, r25
 15a:	80 93 60 00 	sts	0x0060, r24
	if (Released_Confidence_Level[ButtonReleased] > 500)
 15e:	85 5f       	subi	r24, 0xF5	; 245
 160:	91 40       	sbci	r25, 0x01	; 1
 162:	44 f0       	brlt	.+16     	; 0x174 <main+0x40>
	{
		Pressed[ButtonReleased] = 0;
 164:	10 92 6d 00 	sts	0x006D, r1
 168:	10 92 6c 00 	sts	0x006C, r1
		Released_Confidence_Level[ButtonReleased] = 0;
 16c:	10 92 61 00 	sts	0x0061, r1
 170:	10 92 60 00 	sts	0x0060, r1
		else
		{
			//Making sure that the button on side 1 was released
			ProcessReleasedsButton(0);
		}
		if (bit_is_clear(PIND, 7))
 174:	87 99       	sbic	0x10, 7	; 16
 176:	04 c0       	rjmp	.+8      	; 0x180 <main+0x4c>
		{
			//Lighting up LED on port D one at a time
			ProcessPressedButton(1);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	65 df       	rcall	.-310    	; 0x48 <ProcessPressedButton>
 17e:	e0 cf       	rjmp	.-64     	; 0x140 <main+0xc>
	}
}

void ProcessReleasedsButton(int ButtonReleased)
{
	Released_Confidence_Level[ButtonReleased] ++;
 180:	80 91 62 00 	lds	r24, 0x0062
 184:	90 91 63 00 	lds	r25, 0x0063
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	90 93 63 00 	sts	0x0063, r25
 18e:	80 93 62 00 	sts	0x0062, r24
	if (Released_Confidence_Level[ButtonReleased] > 500)
 192:	85 5f       	subi	r24, 0xF5	; 245
 194:	91 40       	sbci	r25, 0x01	; 1
 196:	a4 f2       	brlt	.-88     	; 0x140 <main+0xc>
	{
		Pressed[ButtonReleased] = 0;
 198:	10 92 6f 00 	sts	0x006F, r1
 19c:	10 92 6e 00 	sts	0x006E, r1
		Released_Confidence_Level[ButtonReleased] = 0;
 1a0:	10 92 63 00 	sts	0x0063, r1
 1a4:	10 92 62 00 	sts	0x0062, r1
 1a8:	cb cf       	rjmp	.-106    	; 0x140 <main+0xc>

000001aa <ProcessReleasedsButton>:
	}
}

void ProcessReleasedsButton(int ButtonReleased)
{
	Released_Confidence_Level[ButtonReleased] ++;
 1aa:	fc 01       	movw	r30, r24
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	df 01       	movw	r26, r30
 1b2:	a0 5a       	subi	r26, 0xA0	; 160
 1b4:	bf 4f       	sbci	r27, 0xFF	; 255
 1b6:	8d 91       	ld	r24, X+
 1b8:	9c 91       	ld	r25, X
 1ba:	11 97       	sbiw	r26, 0x01	; 1
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	11 96       	adiw	r26, 0x01	; 1
 1c0:	9c 93       	st	X, r25
 1c2:	8e 93       	st	-X, r24
	if (Released_Confidence_Level[ButtonReleased] > 500)
 1c4:	85 5f       	subi	r24, 0xF5	; 245
 1c6:	91 40       	sbci	r25, 0x01	; 1
 1c8:	34 f0       	brlt	.+12     	; 0x1d6 <ProcessReleasedsButton+0x2c>
	{
		Pressed[ButtonReleased] = 0;
 1ca:	e4 59       	subi	r30, 0x94	; 148
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	11 82       	std	Z+1, r1	; 0x01
 1d0:	10 82       	st	Z, r1
		Released_Confidence_Level[ButtonReleased] = 0;
 1d2:	1d 92       	st	X+, r1
 1d4:	1c 92       	st	X, r1
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
