
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000008a  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000056  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000090  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000075  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	22 c0       	rjmp	.+68     	; 0x52 <__vector_6>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	20 c0       	rjmp	.+64     	; 0x76 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
	sei();
  38:	78 94       	sei
	
	DDRB |= 1<<PINB0;
  3a:	b8 9a       	sbi	0x17, 0	; 23
	
	TCCR1B |= 1<<CS10 | 1<<CS11 | 1<<WGM12;
  3c:	8e b5       	in	r24, 0x2e	; 46
  3e:	8b 60       	ori	r24, 0x0B	; 11
  40:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= 1<<OCIE1A;
  42:	89 b7       	in	r24, 0x39	; 57
  44:	80 61       	ori	r24, 0x10	; 16
  46:	89 bf       	out	0x39, r24	; 57
	OCR1A = 15624;
  48:	88 e0       	ldi	r24, 0x08	; 8
  4a:	9d e3       	ldi	r25, 0x3D	; 61
  4c:	9b bd       	out	0x2b, r25	; 43
  4e:	8a bd       	out	0x2a, r24	; 42
  50:	ff cf       	rjmp	.-2      	; 0x50 <__SREG__+0x11>

00000052 <__vector_6>:
	}
}


ISR(TIMER1_COMPA_vect)
{
  52:	1f 92       	push	r1
  54:	0f 92       	push	r0
  56:	0f b6       	in	r0, 0x3f	; 63
  58:	0f 92       	push	r0
  5a:	11 24       	eor	r1, r1
  5c:	8f 93       	push	r24
  5e:	9f 93       	push	r25
	PORTB ^= 1<<PINB0;
  60:	88 b3       	in	r24, 0x18	; 24
  62:	91 e0       	ldi	r25, 0x01	; 1
  64:	89 27       	eor	r24, r25
  66:	88 bb       	out	0x18, r24	; 24
}
  68:	9f 91       	pop	r25
  6a:	8f 91       	pop	r24
  6c:	0f 90       	pop	r0
  6e:	0f be       	out	0x3f, r0	; 63
  70:	0f 90       	pop	r0
  72:	1f 90       	pop	r1
  74:	18 95       	reti

00000076 <_exit>:
  76:	f8 94       	cli

00000078 <__stop_program>:
  78:	ff cf       	rjmp	.-2      	; 0x78 <__stop_program>
